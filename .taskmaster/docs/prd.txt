# プロジェクトの概要
ユーザーがGitHubでwatchしているリポジトリを監視し、以下のようなイベントの中で
ユーザーにとって気になる変更があった場合に通知するサービス

- 新しいリリース
- PRのマージ
- 新しいIssue
- Issueの更新

※将来的にはNPM経由でのパッケージ更新を監視する必要も考えられるため、GitHubはあくまでデータソースの1つとして捉える必要があります。

## 大まかな仕組み
ユーザーがGitHubでWatchしているリポジトリを定期的にチェックし、新しいリリースやPR、Issueの更新を検知します。
リリースやPRの内容は英語ですが、これはAIを利用して日本語に翻訳して提供します。

### ユーザーにとって興味があるかどうかの検知
ユーザー自身により自然言語のテキストで「どんな変更に興味があるか」を入力してもらいます。
プロンプトインジェクションのリスクを避けるため、この機能の利用にはユーザー自身がAPIキーを入力した場合のみ利用出来るものとします。
また、入力した内容は「興味があるもの」を入力しているか、LLMによりバリデーションを行います。

# コア機能

- GitHubでウォッチしたリポジトリの自動インポート
- GitHubでウォッチしていないリポジトリも手動で追加可能
- GitHubリポジトリ上で起きるリリース/PR/Issueのイベントをユーザーに通知
- ユーザーが自然言語で入力した内容に応じて通知対象をフィルタリング
- 気になるリリース、PR、Issueに"いいね"を付ける、ブックマークする
- 多くのユーザーが"いいね"したリリース、PR、Issueを一覧表示

# MVP
- GitHubでウォッチしているリポジトリのリリースを1日1回監視、
  変更内容を日本語化してDBに保持し、ユーザーに通知する(SlackまたはWebPush)

# 技術スタック

## 技術スタックの概要
- 全般
  - TypeScript
  - pnpm
- フロントエンド
  - Nuxt.js
  - TailWindCSS
  - vitest
  - Playwright
  - Storybook
- フロントエンド(SSR)
  - Nuxt.js
  - Auth0
  - バックエンドAPIとの通信はAPIクライアントを自動生成したい
  - vitest
  - Playwright
- バックエンド
  - Hono
  - zod
  - OpenAPI(Swaggerを自動生成させたい)
  - Drizzle
  - PostgreSQL  
  - vitest

- インフラ
  - インフラデプロイ
    - Terraform (別リポジトリで管理するため、ここでは開発不要)
  - アプリケーションのデプロイ
    - AWS SAM
  - フロントエンド
    - CloudFront
    - S3
  - フロントエンド(SSR)
    - API GateWay
    - Lambda
  - バックエンド
    - API GateWay
    - Lambda
    - StepFunctions
    - SQS
    - Supabase DB (※1)

- CI/CD
  - GitHub Actions

- モニタリング
  - CloudWatch
  - XRay
  - ADOT

※1：ここでSupabaseを利用しますが、これはRDSが高額であるため、費用を抑えるために利用します。
    このためアプリケーションが直接Supabaseに依存することは避けたい意向があります。
    SupabaseのDBは単にPostgreSQLプロトコルでの接続先として利用します。

## 現時点で考えている機能一覧

- サインイン/サインアップ
  (Auth0を利用しGitHubアカウントでログイン)
- ログアウト
- ユーザー設定
  - APIキーの登録
  - 興味がある変更の登録
- ダッシュボード
  - ウォッチしているリポジトリ一覧
  - GitHubスター数の多いリポジトリ一覧（ウォッチしていないもの一覧に切り替え可能)
  - 最新のイベント一覧
- データソース詳細ページ
  - リポジトリの詳細
  - 最近のリリース/PR/Issueの一覧
  - (かなり後で実装したい)リポジトリの代表的なコントリビュータの一覧と、そのコントリビュータの経歴を表示
  - 非ログイン状態でも閲覧可能
- イベント詳細ページ
  - 特定のリリース、PR、Issueの詳細を日本語で表示
  - 非ログイン状態でも閲覧可能
- データソース新規登録/更新
  - 現時点ではGitHubリポジトリのowner/repo 形式で入力。
  - リリース/PR/Issueのどれを監視するか。新規/更新/クローズのどれを監視するかを選択可能
- データソース一覧/削除
  - ウォッチしているリポジトリの一覧
  - 手動追加したリポジトリの一覧
  - ブックマークしたもの、いいねしたものでフィルタリング
- バックグラウンド処理
  - GitHubリポジトリインポート
  - GitHubリポジトリの監視
