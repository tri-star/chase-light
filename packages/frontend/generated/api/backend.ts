/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Chase Light API
 * GitHub リポジトリ監視サービス API - TypeScript + Hono + Zod + OpenAPI
 * OpenAPI spec version: 1.0.0
 */
import type {
  AuthErrorResponse,
  CreateDataSourceRequest,
  CreateDataSourceResponse,
  DataSourceDetailResponse,
  DataSourceError,
  DataSourceListResponse,
  GetApiDataSourcesParams,
  PutApiDataSourcesId200,
  PutApiDataSourcesIdBody,
  SignUpRequest,
  SignUpResponse,
  UpdateProfileRequest,
  UpdateSettingsRequest,
  UserErrorResponse,
  UserProfileResponse,
  UserSettingsResponse
} from './schemas';

import { customFetch } from '../../libs/orval/custom-fetch';

/**
 * Auth0のIDトークンを使用してユーザー登録を行います
 * @summary ユーザー登録
 */
export type postApiAuthSignupResponse200 = {
  data: SignUpResponse
  status: 200
}

export type postApiAuthSignupResponse201 = {
  data: SignUpResponse
  status: 201
}

export type postApiAuthSignupResponse400 = {
  data: AuthErrorResponse
  status: 400
}

export type postApiAuthSignupResponse401 = {
  data: AuthErrorResponse
  status: 401
}

export type postApiAuthSignupResponse500 = {
  data: AuthErrorResponse
  status: 500
}
    
export type postApiAuthSignupResponseSuccess = (postApiAuthSignupResponse200 | postApiAuthSignupResponse201) & {
  headers: Headers;
};
export type postApiAuthSignupResponseError = (postApiAuthSignupResponse400 | postApiAuthSignupResponse401 | postApiAuthSignupResponse500) & {
  headers: Headers;
};

export type postApiAuthSignupResponse = (postApiAuthSignupResponseSuccess | postApiAuthSignupResponseError)

export const getPostApiAuthSignupUrl = () => {


  

  return `http://localhost:3001/api/auth/signup`
}

export const postApiAuthSignup = async (signUpRequest: SignUpRequest, options?: RequestInit): Promise<postApiAuthSignupResponse> => {
  
  return customFetch<postApiAuthSignupResponse>(getPostApiAuthSignupUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      signUpRequest,)
  }
);}



/**
 * 認証済みユーザーのプロフィール情報を取得します
 * @summary プロフィール取得
 */
export type getApiUsersProfileResponse200 = {
  data: UserProfileResponse
  status: 200
}

export type getApiUsersProfileResponse400 = {
  data: UserErrorResponse
  status: 400
}

export type getApiUsersProfileResponse401 = {
  data: UserErrorResponse
  status: 401
}

export type getApiUsersProfileResponse404 = {
  data: UserErrorResponse
  status: 404
}

export type getApiUsersProfileResponse409 = {
  data: UserErrorResponse
  status: 409
}

export type getApiUsersProfileResponse500 = {
  data: UserErrorResponse
  status: 500
}
    
export type getApiUsersProfileResponseSuccess = (getApiUsersProfileResponse200) & {
  headers: Headers;
};
export type getApiUsersProfileResponseError = (getApiUsersProfileResponse400 | getApiUsersProfileResponse401 | getApiUsersProfileResponse404 | getApiUsersProfileResponse409 | getApiUsersProfileResponse500) & {
  headers: Headers;
};

export type getApiUsersProfileResponse = (getApiUsersProfileResponseSuccess | getApiUsersProfileResponseError)

export const getGetApiUsersProfileUrl = () => {


  

  return `http://localhost:3001/api/users/profile`
}

export const getApiUsersProfile = async ( options?: RequestInit): Promise<getApiUsersProfileResponse> => {
  
  return customFetch<getApiUsersProfileResponse>(getGetApiUsersProfileUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * 認証済みユーザーのプロフィール情報を更新します
 * @summary プロフィール更新
 */
export type putApiUsersProfileResponse200 = {
  data: UserProfileResponse
  status: 200
}

export type putApiUsersProfileResponse400 = {
  data: UserErrorResponse
  status: 400
}

export type putApiUsersProfileResponse401 = {
  data: UserErrorResponse
  status: 401
}

export type putApiUsersProfileResponse404 = {
  data: UserErrorResponse
  status: 404
}

export type putApiUsersProfileResponse409 = {
  data: UserErrorResponse
  status: 409
}

export type putApiUsersProfileResponse500 = {
  data: UserErrorResponse
  status: 500
}
    
export type putApiUsersProfileResponseSuccess = (putApiUsersProfileResponse200) & {
  headers: Headers;
};
export type putApiUsersProfileResponseError = (putApiUsersProfileResponse400 | putApiUsersProfileResponse401 | putApiUsersProfileResponse404 | putApiUsersProfileResponse409 | putApiUsersProfileResponse500) & {
  headers: Headers;
};

export type putApiUsersProfileResponse = (putApiUsersProfileResponseSuccess | putApiUsersProfileResponseError)

export const getPutApiUsersProfileUrl = () => {


  

  return `http://localhost:3001/api/users/profile`
}

export const putApiUsersProfile = async (updateProfileRequest: UpdateProfileRequest, options?: RequestInit): Promise<putApiUsersProfileResponse> => {
  
  return customFetch<putApiUsersProfileResponse>(getPutApiUsersProfileUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateProfileRequest,)
  }
);}



/**
 * 認証済みユーザーの設定情報を取得します
 * @summary ユーザー設定取得
 */
export type getApiUsersSettingsResponse200 = {
  data: UserSettingsResponse
  status: 200
}

export type getApiUsersSettingsResponse400 = {
  data: UserErrorResponse
  status: 400
}

export type getApiUsersSettingsResponse401 = {
  data: UserErrorResponse
  status: 401
}

export type getApiUsersSettingsResponse404 = {
  data: UserErrorResponse
  status: 404
}

export type getApiUsersSettingsResponse409 = {
  data: UserErrorResponse
  status: 409
}

export type getApiUsersSettingsResponse500 = {
  data: UserErrorResponse
  status: 500
}
    
export type getApiUsersSettingsResponseSuccess = (getApiUsersSettingsResponse200) & {
  headers: Headers;
};
export type getApiUsersSettingsResponseError = (getApiUsersSettingsResponse400 | getApiUsersSettingsResponse401 | getApiUsersSettingsResponse404 | getApiUsersSettingsResponse409 | getApiUsersSettingsResponse500) & {
  headers: Headers;
};

export type getApiUsersSettingsResponse = (getApiUsersSettingsResponseSuccess | getApiUsersSettingsResponseError)

export const getGetApiUsersSettingsUrl = () => {


  

  return `http://localhost:3001/api/users/settings`
}

export const getApiUsersSettings = async ( options?: RequestInit): Promise<getApiUsersSettingsResponse> => {
  
  return customFetch<getApiUsersSettingsResponse>(getGetApiUsersSettingsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * 認証済みユーザーの設定情報を更新します
 * @summary ユーザー設定更新
 */
export type putApiUsersSettingsResponse200 = {
  data: UserSettingsResponse
  status: 200
}

export type putApiUsersSettingsResponse400 = {
  data: UserErrorResponse
  status: 400
}

export type putApiUsersSettingsResponse401 = {
  data: UserErrorResponse
  status: 401
}

export type putApiUsersSettingsResponse404 = {
  data: UserErrorResponse
  status: 404
}

export type putApiUsersSettingsResponse409 = {
  data: UserErrorResponse
  status: 409
}

export type putApiUsersSettingsResponse500 = {
  data: UserErrorResponse
  status: 500
}
    
export type putApiUsersSettingsResponseSuccess = (putApiUsersSettingsResponse200) & {
  headers: Headers;
};
export type putApiUsersSettingsResponseError = (putApiUsersSettingsResponse400 | putApiUsersSettingsResponse401 | putApiUsersSettingsResponse404 | putApiUsersSettingsResponse409 | putApiUsersSettingsResponse500) & {
  headers: Headers;
};

export type putApiUsersSettingsResponse = (putApiUsersSettingsResponseSuccess | putApiUsersSettingsResponseError)

export const getPutApiUsersSettingsUrl = () => {


  

  return `http://localhost:3001/api/users/settings`
}

export const putApiUsersSettings = async (updateSettingsRequest: UpdateSettingsRequest, options?: RequestInit): Promise<putApiUsersSettingsResponse> => {
  
  return customFetch<putApiUsersSettingsResponse>(getPutApiUsersSettingsUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateSettingsRequest,)
  }
);}



/**
 * ユーザーが監視中のデータソース一覧を取得します。フィルタリング、ソート、ページネーションに対応しています
 * @summary データソース一覧取得
 */
export type getApiDataSourcesResponse200 = {
  data: DataSourceListResponse
  status: 200
}

export type getApiDataSourcesResponse400 = {
  data: DataSourceError
  status: 400
}

export type getApiDataSourcesResponse401 = {
  data: DataSourceError
  status: 401
}

export type getApiDataSourcesResponse404 = {
  data: DataSourceError
  status: 404
}

export type getApiDataSourcesResponse409 = {
  data: DataSourceError
  status: 409
}

export type getApiDataSourcesResponse500 = {
  data: DataSourceError
  status: 500
}
    
export type getApiDataSourcesResponseSuccess = (getApiDataSourcesResponse200) & {
  headers: Headers;
};
export type getApiDataSourcesResponseError = (getApiDataSourcesResponse400 | getApiDataSourcesResponse401 | getApiDataSourcesResponse404 | getApiDataSourcesResponse409 | getApiDataSourcesResponse500) & {
  headers: Headers;
};

export type getApiDataSourcesResponse = (getApiDataSourcesResponseSuccess | getApiDataSourcesResponseError)

export const getGetApiDataSourcesUrl = (params?: GetApiDataSourcesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3001/api/data-sources?${stringifiedParams}` : `http://localhost:3001/api/data-sources`
}

export const getApiDataSources = async (params?: GetApiDataSourcesParams, options?: RequestInit): Promise<getApiDataSourcesResponse> => {
  
  return customFetch<getApiDataSourcesResponse>(getGetApiDataSourcesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * GitHubリポジトリをデータソースとして登録し、ユーザーの監視対象に追加します
 * @summary データソース登録
 */
export type postApiDataSourcesResponse201 = {
  data: CreateDataSourceResponse
  status: 201
}

export type postApiDataSourcesResponse400 = {
  data: DataSourceError
  status: 400
}

export type postApiDataSourcesResponse401 = {
  data: DataSourceError
  status: 401
}

export type postApiDataSourcesResponse404 = {
  data: DataSourceError
  status: 404
}

export type postApiDataSourcesResponse409 = {
  data: DataSourceError
  status: 409
}

export type postApiDataSourcesResponse500 = {
  data: DataSourceError
  status: 500
}
    
export type postApiDataSourcesResponseSuccess = (postApiDataSourcesResponse201) & {
  headers: Headers;
};
export type postApiDataSourcesResponseError = (postApiDataSourcesResponse400 | postApiDataSourcesResponse401 | postApiDataSourcesResponse404 | postApiDataSourcesResponse409 | postApiDataSourcesResponse500) & {
  headers: Headers;
};

export type postApiDataSourcesResponse = (postApiDataSourcesResponseSuccess | postApiDataSourcesResponseError)

export const getPostApiDataSourcesUrl = () => {


  

  return `http://localhost:3001/api/data-sources`
}

export const postApiDataSources = async (createDataSourceRequest: CreateDataSourceRequest, options?: RequestInit): Promise<postApiDataSourcesResponse> => {
  
  return customFetch<postApiDataSourcesResponse>(getPostApiDataSourcesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createDataSourceRequest,)
  }
);}



/**
 * 指定されたIDのデータソース詳細情報を取得します。認証ユーザーがWatch中のデータソースのみアクセス可能です
 * @summary データソース詳細取得
 */
export type getApiDataSourcesIdResponse200 = {
  data: DataSourceDetailResponse
  status: 200
}

export type getApiDataSourcesIdResponse400 = {
  data: DataSourceError
  status: 400
}

export type getApiDataSourcesIdResponse401 = {
  data: DataSourceError
  status: 401
}

export type getApiDataSourcesIdResponse404 = {
  data: DataSourceError
  status: 404
}

export type getApiDataSourcesIdResponse409 = {
  data: DataSourceError
  status: 409
}

export type getApiDataSourcesIdResponse500 = {
  data: DataSourceError
  status: 500
}
    
export type getApiDataSourcesIdResponseSuccess = (getApiDataSourcesIdResponse200) & {
  headers: Headers;
};
export type getApiDataSourcesIdResponseError = (getApiDataSourcesIdResponse400 | getApiDataSourcesIdResponse401 | getApiDataSourcesIdResponse404 | getApiDataSourcesIdResponse409 | getApiDataSourcesIdResponse500) & {
  headers: Headers;
};

export type getApiDataSourcesIdResponse = (getApiDataSourcesIdResponseSuccess | getApiDataSourcesIdResponseError)

export const getGetApiDataSourcesIdUrl = (id: string,) => {


  

  return `http://localhost:3001/api/data-sources/${id}`
}

export const getApiDataSourcesId = async (id: string, options?: RequestInit): Promise<getApiDataSourcesIdResponse> => {
  
  return customFetch<getApiDataSourcesIdResponse>(getGetApiDataSourcesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * 指定されたIDのデータソース設定を更新します。認証ユーザーがWatch中のデータソースのみ更新可能です
 * @summary データソース更新
 */
export type putApiDataSourcesIdResponse200 = {
  data: PutApiDataSourcesId200
  status: 200
}

export type putApiDataSourcesIdResponse400 = {
  data: DataSourceError
  status: 400
}

export type putApiDataSourcesIdResponse401 = {
  data: DataSourceError
  status: 401
}

export type putApiDataSourcesIdResponse404 = {
  data: DataSourceError
  status: 404
}

export type putApiDataSourcesIdResponse409 = {
  data: DataSourceError
  status: 409
}

export type putApiDataSourcesIdResponse500 = {
  data: DataSourceError
  status: 500
}
    
export type putApiDataSourcesIdResponseSuccess = (putApiDataSourcesIdResponse200) & {
  headers: Headers;
};
export type putApiDataSourcesIdResponseError = (putApiDataSourcesIdResponse400 | putApiDataSourcesIdResponse401 | putApiDataSourcesIdResponse404 | putApiDataSourcesIdResponse409 | putApiDataSourcesIdResponse500) & {
  headers: Headers;
};

export type putApiDataSourcesIdResponse = (putApiDataSourcesIdResponseSuccess | putApiDataSourcesIdResponseError)

export const getPutApiDataSourcesIdUrl = (id: string,) => {


  

  return `http://localhost:3001/api/data-sources/${id}`
}

export const putApiDataSourcesId = async (id: string,
    putApiDataSourcesIdBody: PutApiDataSourcesIdBody, options?: RequestInit): Promise<putApiDataSourcesIdResponse> => {
  
  return customFetch<putApiDataSourcesIdResponse>(getPutApiDataSourcesIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putApiDataSourcesIdBody,)
  }
);}



/**
 * 指定されたIDのデータソース監視を削除します。認証ユーザーがWatch中のデータソースのみ削除可能です
 * @summary データソース削除
 */
export type deleteApiDataSourcesIdResponse204 = {
  data: void
  status: 204
}

export type deleteApiDataSourcesIdResponse400 = {
  data: DataSourceError
  status: 400
}

export type deleteApiDataSourcesIdResponse401 = {
  data: DataSourceError
  status: 401
}

export type deleteApiDataSourcesIdResponse404 = {
  data: DataSourceError
  status: 404
}

export type deleteApiDataSourcesIdResponse409 = {
  data: DataSourceError
  status: 409
}

export type deleteApiDataSourcesIdResponse500 = {
  data: DataSourceError
  status: 500
}
    
export type deleteApiDataSourcesIdResponseSuccess = (deleteApiDataSourcesIdResponse204) & {
  headers: Headers;
};
export type deleteApiDataSourcesIdResponseError = (deleteApiDataSourcesIdResponse400 | deleteApiDataSourcesIdResponse401 | deleteApiDataSourcesIdResponse404 | deleteApiDataSourcesIdResponse409 | deleteApiDataSourcesIdResponse500) & {
  headers: Headers;
};

export type deleteApiDataSourcesIdResponse = (deleteApiDataSourcesIdResponseSuccess | deleteApiDataSourcesIdResponseError)

export const getDeleteApiDataSourcesIdUrl = (id: string,) => {


  

  return `http://localhost:3001/api/data-sources/${id}`
}

export const deleteApiDataSourcesId = async (id: string, options?: RequestInit): Promise<deleteApiDataSourcesIdResponse> => {
  
  return customFetch<deleteApiDataSourcesIdResponse>(getDeleteApiDataSourcesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



