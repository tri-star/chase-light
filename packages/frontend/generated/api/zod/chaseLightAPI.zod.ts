/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Chase Light API
 * GitHub リポジトリ監視サービス API - TypeScript + Hono + Zod + OpenAPI
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * Auth0のIDトークンを使用してユーザー登録を行います
 * @summary ユーザー登録
 */
export const postApiAuthSignupBody = zod.object({
  "idToken": zod.string().min(1).describe('Auth0から取得したIDトークン')
})

export const postApiAuthSignupResponse = zod.object({
  "user": zod.object({
  "id": zod.uuid().describe('ユーザーID（UUID）'),
  "email": zod.email().describe('メールアドレス'),
  "name": zod.string().describe('ユーザー名'),
  "githubUsername": zod.string().optional().describe('GitHubユーザー名（オプション）'),
  "avatarUrl": zod.url().describe('アバター画像URL'),
  "createdAt": zod.iso.datetime({}).describe('アカウント作成日時（ISO 8601形式）')
}),
  "message": zod.string().describe('処理結果メッセージ'),
  "alreadyExists": zod.boolean().optional().describe('既存ユーザーの場合はtrue')
})


/**
 * 認証済みユーザーのプロフィール情報を取得します
 * @summary プロフィール取得
 */
export const getApiUsersProfileResponse = zod.object({
  "user": zod.object({
  "id": zod.uuid().describe('ユーザーID（UUID）'),
  "email": zod.email().describe('メールアドレス'),
  "name": zod.string().describe('ユーザー名'),
  "githubUsername": zod.string().nullable().describe('GitHubユーザー名（オプション）'),
  "avatarUrl": zod.url().describe('アバター画像URL'),
  "timezone": zod.string().describe('タイムゾーン'),
  "createdAt": zod.iso.datetime({}).describe('アカウント作成日時（ISO 8601形式）'),
  "updatedAt": zod.iso.datetime({}).describe('最終更新日時（ISO 8601形式）')
})
})


/**
 * 認証済みユーザーのプロフィール情報を更新します
 * @summary プロフィール更新
 */
export const putApiUsersProfileBodyNameMax = 100;
export const putApiUsersProfileBodyEmailMax = 255;


export const putApiUsersProfileBody = zod.object({
  "name": zod.string().min(1).max(putApiUsersProfileBodyNameMax).describe('ユーザー名'),
  "email": zod.string().min(1).max(putApiUsersProfileBodyEmailMax).describe('メールアドレス'),
  "timezone": zod.string().optional().describe('タイムゾーン（IANA形式）')
})

export const putApiUsersProfileResponse = zod.object({
  "user": zod.object({
  "id": zod.uuid().describe('ユーザーID（UUID）'),
  "email": zod.email().describe('メールアドレス'),
  "name": zod.string().describe('ユーザー名'),
  "githubUsername": zod.string().nullable().describe('GitHubユーザー名（オプション）'),
  "avatarUrl": zod.url().describe('アバター画像URL'),
  "timezone": zod.string().describe('タイムゾーン'),
  "createdAt": zod.iso.datetime({}).describe('アカウント作成日時（ISO 8601形式）'),
  "updatedAt": zod.iso.datetime({}).describe('最終更新日時（ISO 8601形式）')
})
})


/**
 * 認証済みユーザーの設定情報を取得します
 * @summary ユーザー設定取得
 */
export const getApiUsersSettingsResponse = zod.object({
  "user": zod.object({
  "id": zod.uuid().describe('ユーザーID（UUID）'),
  "email": zod.email().describe('メールアドレス'),
  "name": zod.string().describe('ユーザー名'),
  "githubUsername": zod.string().nullable().describe('GitHubユーザー名（オプション）'),
  "avatarUrl": zod.url().describe('アバター画像URL'),
  "timezone": zod.string().describe('タイムゾーン'),
  "createdAt": zod.iso.datetime({}).describe('アカウント作成日時（ISO 8601形式）'),
  "updatedAt": zod.iso.datetime({}).describe('最終更新日時（ISO 8601形式）'),
  "settings": zod.object({
  "timezone": zod.string().describe('タイムゾーン'),
  "emailNotifications": zod.boolean().describe('メール通知の有効/無効'),
  "pushNotifications": zod.boolean().describe('プッシュ通知の有効/無効'),
  "language": zod.enum(['ja', 'en']).describe('表示言語')
})
})
})


/**
 * 認証済みユーザーの設定情報を更新します
 * @summary ユーザー設定更新
 */
export const putApiUsersSettingsBody = zod.object({
  "timezone": zod.string().optional().describe('タイムゾーン（IANA形式）'),
  "emailNotifications": zod.boolean().optional().describe('メール通知の有効/無効'),
  "pushNotifications": zod.boolean().optional().describe('プッシュ通知の有効/無効'),
  "language": zod.enum(['ja', 'en']).optional().describe('表示言語（ja/en）')
})

export const putApiUsersSettingsResponse = zod.object({
  "user": zod.object({
  "id": zod.uuid().describe('ユーザーID（UUID）'),
  "email": zod.email().describe('メールアドレス'),
  "name": zod.string().describe('ユーザー名'),
  "githubUsername": zod.string().nullable().describe('GitHubユーザー名（オプション）'),
  "avatarUrl": zod.url().describe('アバター画像URL'),
  "timezone": zod.string().describe('タイムゾーン'),
  "createdAt": zod.iso.datetime({}).describe('アカウント作成日時（ISO 8601形式）'),
  "updatedAt": zod.iso.datetime({}).describe('最終更新日時（ISO 8601形式）'),
  "settings": zod.object({
  "timezone": zod.string().describe('タイムゾーン'),
  "emailNotifications": zod.boolean().describe('メール通知の有効/無効'),
  "pushNotifications": zod.boolean().describe('プッシュ通知の有効/無効'),
  "language": zod.enum(['ja', 'en']).describe('表示言語')
})
})
})


/**
 * ユーザーが監視中のデータソース一覧を取得します。フィルタリング、ソート、ページネーションに対応しています
 * @summary データソース一覧取得
 */
export const getApiDataSourcesQuerySortByDefault = "createdAt";export const getApiDataSourcesQuerySortOrderDefault = "desc";export const getApiDataSourcesQueryPageDefault = 1;export const getApiDataSourcesQueryPerPageDefault = 20;
export const getApiDataSourcesQueryPerPageMax = 100;


export const getApiDataSourcesQueryParams = zod.object({
  "name": zod.string().optional().describe('データソース名での部分一致検索'),
  "owner": zod.string().optional().describe('GitHubオーナー名での部分一致検索'),
  "search": zod.string().optional().describe('フリーワード検索（name, description, url, fullName対象）'),
  "sourceType": zod.string().optional().describe('データソースタイプでの絞り込み'),
  "isPrivate": zod.boolean().nullish().describe('プライベート/パブリック絞り込み'),
  "language": zod.string().optional().describe('プログラミング言語での絞り込み'),
  "createdAfter": zod.iso.datetime({}).optional().describe('登録日（これ以降）ISO8601形式'),
  "createdBefore": zod.iso.datetime({}).optional().describe('登録日（これ以前）ISO8601形式'),
  "updatedAfter": zod.iso.datetime({}).optional().describe('更新日（これ以降）ISO8601形式'),
  "updatedBefore": zod.iso.datetime({}).optional().describe('更新日（これ以前）ISO8601形式'),
  "sortBy": zod.enum(['name', 'createdAt', 'updatedAt', 'addedAt', 'starsCount']).default(getApiDataSourcesQuerySortByDefault).describe('ソート基準'),
  "sortOrder": zod.enum(['asc', 'desc']).default(getApiDataSourcesQuerySortOrderDefault).describe('ソート順（昇順・降順）'),
  "page": zod.number().min(1).default(getApiDataSourcesQueryPageDefault).describe('ページ番号（1ベース）'),
  "perPage": zod.number().min(1).max(getApiDataSourcesQueryPerPageMax).default(getApiDataSourcesQueryPerPageDefault).describe('1ページあたりの件数（1-100）')
})

export const getApiDataSourcesResponseDataPaginationPerPageMax = 100;
export const getApiDataSourcesResponseDataPaginationTotalMin = 0;
export const getApiDataSourcesResponseDataPaginationTotalPagesMin = 0;


export const getApiDataSourcesResponse = zod.object({
  "success": zod.boolean().describe('成功フラグ'),
  "data": zod.object({
  "items": zod.array(zod.object({
  "dataSource": zod.object({
  "id": zod.string().describe('データソースID'),
  "sourceType": zod.string().describe('データソースタイプ'),
  "sourceId": zod.string().describe('外部サービスでのID'),
  "name": zod.string().describe('データソース名'),
  "description": zod.string().describe('データソースの説明'),
  "url": zod.string().describe('データソースのURL'),
  "isPrivate": zod.boolean().describe('プライベートリポジトリかどうか'),
  "repository": zod.object({
  "id": zod.string().describe('リポジトリID'),
  "githubId": zod.number().describe('GitHub リポジトリID'),
  "fullName": zod.string().describe('リポジトリのフルネーム'),
  "language": zod.string().nullable().describe('主要プログラミング言語'),
  "starsCount": zod.number().describe('スター数'),
  "forksCount": zod.number().describe('フォーク数'),
  "openIssuesCount": zod.number().describe('未解決イシュー数'),
  "isFork": zod.boolean().describe('フォークリポジトリかどうか'),
  "createdAt": zod.string().describe('作成日時'),
  "updatedAt": zod.string().describe('更新日時')
}),
  "createdAt": zod.string().describe('作成日時'),
  "updatedAt": zod.string().describe('更新日時')
}),
  "userWatch": zod.object({
  "id": zod.string().describe('ユーザーウォッチID'),
  "userId": zod.string().describe('ユーザーID'),
  "dataSourceId": zod.string().describe('データソースID'),
  "notificationEnabled": zod.boolean().describe('通知が有効かどうか'),
  "watchReleases": zod.boolean().describe('リリースを監視するか'),
  "watchIssues": zod.boolean().describe('イシューを監視するか'),
  "watchPullRequests": zod.boolean().describe('プルリクエストを監視するか'),
  "addedAt": zod.string().describe('追加日時')
})
})).describe('データソース一覧'),
  "pagination": zod.object({
  "page": zod.number().min(1).describe('現在のページ番号（1ベース）'),
  "perPage": zod.number().min(1).max(getApiDataSourcesResponseDataPaginationPerPageMax).describe('1ページあたりの件数'),
  "total": zod.number().min(getApiDataSourcesResponseDataPaginationTotalMin).describe('総件数'),
  "totalPages": zod.number().min(getApiDataSourcesResponseDataPaginationTotalPagesMin).describe('総ページ数'),
  "hasNext": zod.boolean().describe('次のページが存在するか'),
  "hasPrev": zod.boolean().describe('前のページが存在するか')
}).describe('ページネーション情報')
}).describe('レスポンスデータ')
})


/**
 * GitHubリポジトリをデータソースとして登録し、ユーザーの監視対象に追加します
 * @summary データソース登録
 */
export const postApiDataSourcesBodyNotificationEnabledDefault = true;export const postApiDataSourcesBodyWatchReleasesDefault = true;export const postApiDataSourcesBodyWatchIssuesDefault = false;export const postApiDataSourcesBodyWatchPullRequestsDefault = false;

export const postApiDataSourcesBody = zod.object({
  "repositoryUrl": zod.string().min(1).describe('GitHubリポジトリのURL'),
  "name": zod.string().optional().describe('カスタム表示名（省略時はリポジトリ名を使用）'),
  "description": zod.string().optional().describe('カスタム説明（省略時はリポジトリの説明を使用）'),
  "notificationEnabled": zod.boolean().default(postApiDataSourcesBodyNotificationEnabledDefault).describe('通知を有効にするか（デフォルト: true）'),
  "watchReleases": zod.boolean().default(postApiDataSourcesBodyWatchReleasesDefault).describe('リリースを監視するか（デフォルト: true）'),
  "watchIssues": zod.boolean().optional().describe('イシューを監視するか（デフォルト: false）'),
  "watchPullRequests": zod.boolean().optional().describe('プルリクエストを監視するか（デフォルト: false）')
})


/**
 * 指定されたIDのデータソース詳細情報を取得します。認証ユーザーがWatch中のデータソースのみアクセス可能です
 * @summary データソース詳細取得
 */
export const getApiDataSourcesIdParams = zod.object({
  "id": zod.uuid().describe('データソースID（UUID形式）')
})

export const getApiDataSourcesIdResponse = zod.object({
  "success": zod.boolean().describe('API実行の成功フラグ'),
  "data": zod.object({
  "dataSource": zod.object({
  "id": zod.string().describe('データソースID'),
  "sourceType": zod.string().describe('データソースタイプ'),
  "sourceId": zod.string().describe('外部サービスでのID'),
  "name": zod.string().describe('データソース名'),
  "description": zod.string().describe('データソースの説明'),
  "url": zod.string().describe('データソースのURL'),
  "isPrivate": zod.boolean().describe('プライベートリポジトリかどうか'),
  "repository": zod.object({
  "id": zod.string().describe('リポジトリID'),
  "githubId": zod.number().describe('GitHub リポジトリID'),
  "fullName": zod.string().describe('リポジトリのフルネーム'),
  "language": zod.string().nullable().describe('主要プログラミング言語'),
  "starsCount": zod.number().describe('スター数'),
  "forksCount": zod.number().describe('フォーク数'),
  "openIssuesCount": zod.number().describe('未解決イシュー数'),
  "isFork": zod.boolean().describe('フォークリポジトリかどうか'),
  "createdAt": zod.string().describe('作成日時'),
  "updatedAt": zod.string().describe('更新日時')
}),
  "createdAt": zod.string().describe('作成日時'),
  "updatedAt": zod.string().describe('更新日時')
}),
  "userWatch": zod.object({
  "id": zod.string().describe('ユーザーウォッチID'),
  "userId": zod.string().describe('ユーザーID'),
  "dataSourceId": zod.string().describe('データソースID'),
  "notificationEnabled": zod.boolean().describe('通知が有効かどうか'),
  "watchReleases": zod.boolean().describe('リリースを監視するか'),
  "watchIssues": zod.boolean().describe('イシューを監視するか'),
  "watchPullRequests": zod.boolean().describe('プルリクエストを監視するか'),
  "addedAt": zod.string().describe('追加日時')
})
})
})


/**
 * 指定されたIDのデータソース設定を更新します。認証ユーザーがWatch中のデータソースのみ更新可能です
 * @summary データソース更新
 */
export const putApiDataSourcesIdParams = zod.object({
  "id": zod.uuid().describe('データソースID（UUID形式）')
})

export const putApiDataSourcesIdBodyNameMax = 255;
export const putApiDataSourcesIdBodyDescriptionMax = 1000;


export const putApiDataSourcesIdBody = zod.object({
  "name": zod.string().min(1).max(putApiDataSourcesIdBodyNameMax).optional().describe('データソースの表示名（カスタマイズ可能）'),
  "description": zod.string().max(putApiDataSourcesIdBodyDescriptionMax).optional().describe('データソースの説明（カスタマイズ可能）'),
  "notificationEnabled": zod.boolean().optional().describe('通知の有効/無効'),
  "watchReleases": zod.boolean().optional().describe('リリース監視の有効/無効'),
  "watchIssues": zod.boolean().optional().describe('Issue監視の有効/無効'),
  "watchPullRequests": zod.boolean().optional().describe('PR監視の有効/無効')
})

export const putApiDataSourcesIdResponse = zod.object({
  "success": zod.literal(true),
  "data": zod.object({
  "dataSource": zod.object({
  "id": zod.uuid(),
  "sourceType": zod.string(),
  "sourceId": zod.string(),
  "name": zod.string(),
  "description": zod.string(),
  "url": zod.string(),
  "isPrivate": zod.boolean(),
  "repository": zod.object({
  "id": zod.uuid(),
  "githubId": zod.number(),
  "fullName": zod.string(),
  "owner": zod.string(),
  "language": zod.string().nullable(),
  "starsCount": zod.number(),
  "forksCount": zod.number(),
  "openIssuesCount": zod.number(),
  "isFork": zod.boolean(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
}),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
}),
  "userWatch": zod.object({
  "id": zod.uuid(),
  "userId": zod.uuid(),
  "dataSourceId": zod.uuid(),
  "notificationEnabled": zod.boolean(),
  "watchReleases": zod.boolean(),
  "watchIssues": zod.boolean(),
  "watchPullRequests": zod.boolean(),
  "addedAt": zod.string()
})
})
})


/**
 * 指定されたIDのデータソース監視を削除します。認証ユーザーがWatch中のデータソースのみ削除可能です
 * @summary データソース削除
 */
export const deleteApiDataSourcesIdParams = zod.object({
  "id": zod.uuid().describe('データソースID（UUID形式）')
})


