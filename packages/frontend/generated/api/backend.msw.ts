/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Chase Light API
 * GitHub „É™„Éù„Ç∏„Éà„É™Áõ£Ë¶ñ„Çµ„Éº„Éì„Çπ API - TypeScript + Hono + Zod + OpenAPI
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  http
} from 'msw';

import type {
  CreateDataSourceResponse,
  DataSourceDetailResponse,
  DataSourceListResponse,
  PutApiDataSourcesId200,
  SignUpResponse,
  UserProfileResponse,
  UserSettingsResponse
} from './schemas';


export const getPostApiAuthSignupResponseMock = (overrideResponse: Partial< SignUpResponse | SignUpResponse > = {}): SignUpResponse | SignUpResponse => (faker.helpers.arrayElement([{user: {id: faker.string.uuid(), email: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}}), githubUsername: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), avatarUrl: faker.internet.url(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, message: faker.string.alpha({length: {min: 10, max: 20}}), alreadyExists: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse}, {user: {id: faker.string.uuid(), email: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}}), githubUsername: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), avatarUrl: faker.internet.url(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, message: faker.string.alpha({length: {min: 10, max: 20}}), alreadyExists: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse}]))

export const getGetApiUsersProfileResponseMock = (overrideResponse: Partial< UserProfileResponse > = {}): UserProfileResponse => ({user: {id: faker.string.uuid(), email: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}}), githubUsername: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), avatarUrl: faker.internet.url(), timezone: faker.string.alpha({length: {min: 10, max: 20}}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})

export const getPutApiUsersProfileResponseMock = (overrideResponse: Partial< UserProfileResponse > = {}): UserProfileResponse => ({user: {id: faker.string.uuid(), email: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}}), githubUsername: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), avatarUrl: faker.internet.url(), timezone: faker.string.alpha({length: {min: 10, max: 20}}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})

export const getGetApiUsersSettingsResponseMock = (overrideResponse: Partial< UserSettingsResponse > = {}): UserSettingsResponse => ({user: {id: faker.string.uuid(), email: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}}), githubUsername: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), avatarUrl: faker.internet.url(), timezone: faker.string.alpha({length: {min: 10, max: 20}}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, settings: {timezone: faker.string.alpha({length: {min: 10, max: 20}}), emailNotifications: faker.datatype.boolean(), pushNotifications: faker.datatype.boolean(), language: faker.helpers.arrayElement(['ja','en'] as const)}}, ...overrideResponse})

export const getPutApiUsersSettingsResponseMock = (overrideResponse: Partial< UserSettingsResponse > = {}): UserSettingsResponse => ({user: {id: faker.string.uuid(), email: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}}), githubUsername: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), avatarUrl: faker.internet.url(), timezone: faker.string.alpha({length: {min: 10, max: 20}}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, settings: {timezone: faker.string.alpha({length: {min: 10, max: 20}}), emailNotifications: faker.datatype.boolean(), pushNotifications: faker.datatype.boolean(), language: faker.helpers.arrayElement(['ja','en'] as const)}}, ...overrideResponse})

export const getGetApiDataSourcesResponseMock = (overrideResponse: Partial< DataSourceListResponse > = {}): DataSourceListResponse => ({success: faker.datatype.boolean(), data: {items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dataSource: {id: faker.string.alpha({length: {min: 10, max: 20}}), sourceType: faker.string.alpha({length: {min: 10, max: 20}}), sourceId: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 10, max: 20}}), description: faker.string.alpha({length: {min: 10, max: 20}}), url: faker.string.alpha({length: {min: 10, max: 20}}), isPrivate: faker.datatype.boolean(), createdAt: faker.string.alpha({length: {min: 10, max: 20}}), updatedAt: faker.string.alpha({length: {min: 10, max: 20}})}, repository: {...{id: faker.string.alpha({length: {min: 10, max: 20}}), dataSourceId: faker.string.alpha({length: {min: 10, max: 20}}), githubId: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), fullName: faker.string.alpha({length: {min: 10, max: 20}}), language: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), starsCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), forksCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), openIssuesCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), isFork: faker.datatype.boolean(), createdAt: faker.string.alpha({length: {min: 10, max: 20}}), updatedAt: faker.string.alpha({length: {min: 10, max: 20}})},...{owner: faker.string.alpha({length: {min: 10, max: 20}})},}, userWatch: {id: faker.string.alpha({length: {min: 10, max: 20}}), userId: faker.string.alpha({length: {min: 10, max: 20}}), dataSourceId: faker.string.alpha({length: {min: 10, max: 20}}), notificationEnabled: faker.datatype.boolean(), watchReleases: faker.datatype.boolean(), watchIssues: faker.datatype.boolean(), watchPullRequests: faker.datatype.boolean(), addedAt: faker.string.alpha({length: {min: 10, max: 20}})}})), pagination: {page: faker.number.int({min: 1, max: undefined}), perPage: faker.number.int({min: 1, max: 100}), total: faker.number.int({min: 0, max: undefined}), totalPages: faker.number.int({min: 0, max: undefined}), hasNext: faker.datatype.boolean(), hasPrev: faker.datatype.boolean()}}, ...overrideResponse})

export const getPostApiDataSourcesResponseMock = (overrideResponse: Partial< CreateDataSourceResponse > = {}): CreateDataSourceResponse => ({success: faker.datatype.boolean(), data: {dataSource: {id: faker.string.alpha({length: {min: 10, max: 20}}), sourceType: faker.string.alpha({length: {min: 10, max: 20}}), sourceId: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 10, max: 20}}), description: faker.string.alpha({length: {min: 10, max: 20}}), url: faker.string.alpha({length: {min: 10, max: 20}}), isPrivate: faker.datatype.boolean(), createdAt: faker.string.alpha({length: {min: 10, max: 20}}), updatedAt: faker.string.alpha({length: {min: 10, max: 20}})}, repository: {id: faker.string.alpha({length: {min: 10, max: 20}}), dataSourceId: faker.string.alpha({length: {min: 10, max: 20}}), githubId: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), fullName: faker.string.alpha({length: {min: 10, max: 20}}), language: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), starsCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), forksCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), openIssuesCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), isFork: faker.datatype.boolean(), createdAt: faker.string.alpha({length: {min: 10, max: 20}}), updatedAt: faker.string.alpha({length: {min: 10, max: 20}})}, userWatch: {id: faker.string.alpha({length: {min: 10, max: 20}}), userId: faker.string.alpha({length: {min: 10, max: 20}}), dataSourceId: faker.string.alpha({length: {min: 10, max: 20}}), notificationEnabled: faker.datatype.boolean(), watchReleases: faker.datatype.boolean(), watchIssues: faker.datatype.boolean(), watchPullRequests: faker.datatype.boolean(), addedAt: faker.string.alpha({length: {min: 10, max: 20}})}}, ...overrideResponse})

export const getGetApiDataSourcesIdResponseMock = (overrideResponse: Partial< DataSourceDetailResponse > = {}): DataSourceDetailResponse => ({success: faker.datatype.boolean(), data: {dataSource: {id: faker.string.alpha({length: {min: 10, max: 20}}), sourceType: faker.string.alpha({length: {min: 10, max: 20}}), sourceId: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 10, max: 20}}), description: faker.string.alpha({length: {min: 10, max: 20}}), url: faker.string.alpha({length: {min: 10, max: 20}}), isPrivate: faker.datatype.boolean(), createdAt: faker.string.alpha({length: {min: 10, max: 20}}), updatedAt: faker.string.alpha({length: {min: 10, max: 20}})}, repository: {...{id: faker.string.alpha({length: {min: 10, max: 20}}), dataSourceId: faker.string.alpha({length: {min: 10, max: 20}}), githubId: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), fullName: faker.string.alpha({length: {min: 10, max: 20}}), language: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), starsCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), forksCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), openIssuesCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), isFork: faker.datatype.boolean(), createdAt: faker.string.alpha({length: {min: 10, max: 20}}), updatedAt: faker.string.alpha({length: {min: 10, max: 20}})},...{owner: faker.string.alpha({length: {min: 10, max: 20}})},}, userWatch: {id: faker.string.alpha({length: {min: 10, max: 20}}), userId: faker.string.alpha({length: {min: 10, max: 20}}), dataSourceId: faker.string.alpha({length: {min: 10, max: 20}}), notificationEnabled: faker.datatype.boolean(), watchReleases: faker.datatype.boolean(), watchIssues: faker.datatype.boolean(), watchPullRequests: faker.datatype.boolean(), addedAt: faker.string.alpha({length: {min: 10, max: 20}})}}, ...overrideResponse})

export const getPutApiDataSourcesIdResponseMock = (overrideResponse: Partial< PutApiDataSourcesId200 > = {}): PutApiDataSourcesId200 => ({success: faker.datatype.boolean(), data: {dataSource: {id: faker.string.uuid(), sourceType: faker.string.alpha({length: {min: 10, max: 20}}), sourceId: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 10, max: 20}}), description: faker.string.alpha({length: {min: 10, max: 20}}), url: faker.string.alpha({length: {min: 10, max: 20}}), isPrivate: faker.datatype.boolean(), createdAt: faker.string.alpha({length: {min: 10, max: 20}}), updatedAt: faker.string.alpha({length: {min: 10, max: 20}})}, repository: {id: faker.string.uuid(), dataSourceId: faker.string.uuid(), githubId: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), fullName: faker.string.alpha({length: {min: 10, max: 20}}), owner: faker.string.alpha({length: {min: 10, max: 20}}), language: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), starsCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), forksCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), openIssuesCount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), isFork: faker.datatype.boolean(), createdAt: faker.string.alpha({length: {min: 10, max: 20}}), updatedAt: faker.string.alpha({length: {min: 10, max: 20}})}, userWatch: {id: faker.string.uuid(), userId: faker.string.uuid(), dataSourceId: faker.string.uuid(), notificationEnabled: faker.datatype.boolean(), watchReleases: faker.datatype.boolean(), watchIssues: faker.datatype.boolean(), watchPullRequests: faker.datatype.boolean(), addedAt: faker.string.alpha({length: {min: 10, max: 20}})}}, ...overrideResponse})


export const getPostApiAuthSignupMockHandler = (overrideResponse?: SignUpResponse | SignUpResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SignUpResponse | SignUpResponse> | SignUpResponse | SignUpResponse)) => {
  return http.post('*/api/auth/signup', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostApiAuthSignupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetApiUsersProfileMockHandler = (overrideResponse?: UserProfileResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserProfileResponse> | UserProfileResponse)) => {
  return http.get('*/api/users/profile', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetApiUsersProfileResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutApiUsersProfileMockHandler = (overrideResponse?: UserProfileResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<UserProfileResponse> | UserProfileResponse)) => {
  return http.put('*/api/users/profile', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutApiUsersProfileResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetApiUsersSettingsMockHandler = (overrideResponse?: UserSettingsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserSettingsResponse> | UserSettingsResponse)) => {
  return http.get('*/api/users/settings', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetApiUsersSettingsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutApiUsersSettingsMockHandler = (overrideResponse?: UserSettingsResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<UserSettingsResponse> | UserSettingsResponse)) => {
  return http.put('*/api/users/settings', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutApiUsersSettingsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetApiDataSourcesMockHandler = (overrideResponse?: DataSourceListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DataSourceListResponse> | DataSourceListResponse)) => {
  return http.get('*/api/data-sources', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetApiDataSourcesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiDataSourcesMockHandler = (overrideResponse?: CreateDataSourceResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateDataSourceResponse> | CreateDataSourceResponse)) => {
  return http.post('*/api/data-sources', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostApiDataSourcesResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetApiDataSourcesIdMockHandler = (overrideResponse?: DataSourceDetailResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DataSourceDetailResponse> | DataSourceDetailResponse)) => {
  return http.get('*/api/data-sources/:id', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetApiDataSourcesIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutApiDataSourcesIdMockHandler = (overrideResponse?: PutApiDataSourcesId200 | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PutApiDataSourcesId200> | PutApiDataSourcesId200)) => {
  return http.put('*/api/data-sources/:id', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutApiDataSourcesIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteApiDataSourcesIdMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('*/api/data-sources/:id', async (info) => {
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getChaseLightAPIMock = () => [
  getPostApiAuthSignupMockHandler(),
  getGetApiUsersProfileMockHandler(),
  getPutApiUsersProfileMockHandler(),
  getGetApiUsersSettingsMockHandler(),
  getPutApiUsersSettingsMockHandler(),
  getGetApiDataSourcesMockHandler(),
  getPostApiDataSourcesMockHandler(),
  getGetApiDataSourcesIdMockHandler(),
  getPutApiDataSourcesIdMockHandler(),
  getDeleteApiDataSourcesIdMockHandler()
]
