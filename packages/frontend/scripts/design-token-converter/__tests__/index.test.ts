import { describe, test, expect, vi, beforeEach, afterEach } from 'vitest'
import { vol } from 'memfs'
import type { DesignTokens } from '../types'

// Mock fs module to use memfs
vi.mock('fs', async () => {
  const memfs = await import('memfs')
  return {
    ...memfs.fs,
    default: memfs.fs,
  }
})

// Mock path.join and path.dirname for memfs compatibility
vi.mock('path', async () => {
  const actualPath = await vi.importActual('path')
  return {
    ...actualPath,
    join: (...paths: string[]) => paths.join('/').replace(/\/+/g, '/'),
    dirname: (path: string) => {
      const parts = path.split('/')
      return parts.slice(0, -1).join('/') || '/'
    },
  }
})

// Import DesignTokenConverter after mocking fs
const { DesignTokenConverter } = await import('../index')

describe('DesignTokenConverter', () => {
  const mockTokens: DesignTokens = {
    $schema:
      'https://design-tokens.github.io/community-group/format/tokens.json',
    color: {
      $type: 'color',
      primitive: {
        blue: {
          '500': { value: 'oklch(53.992% 0.19058 257.48)' },
        },
      },
      semantic: {
        light: {
          content: {
            default: {
              bg: { value: '{color.primitive.blue.500}' },
            },
          },
        },
        dark: {
          content: {
            default: {
              bg: { value: '{color.primitive.blue.500}' },
            },
          },
        },
      },
    },
    spacing: {
      $type: 'dimension',
      '4': { value: '1rem' },
    },
  }

  let converter: InstanceType<typeof DesignTokenConverter>
  let consoleSpy: ReturnType<typeof vi.spyOn>

  beforeEach(() => {
    // Reset memfs volume and set up test files
    vol.reset()

    // Create test tokens file in memfs
    vol.fromJSON({
      './test-tokens.json': JSON.stringify(mockTokens),
    })

    converter = new DesignTokenConverter('./test-tokens.json', './test-output')
    consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => {})
  })

  afterEach(() => {
    // Clean up memfs volume
    vol.reset()
    vi.clearAllMocks()
    consoleSpy.mockRestore()
  })

  describe('convert', () => {
    test('„Éà„Éº„ÇØ„É≥„ÅÆÂ§âÊèõ„ÅåÊ≠£Â∏∏„Å´ÂÆüË°å„Åï„Çå„Çã', async () => {
      await converter.convert()

      // memfs„Å´Âá∫Âäõ„Éï„Ç°„Ç§„É´„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const files = vol.toJSON()
      const cssPath = Object.keys(files).find((path) =>
        path.includes('tailwind.css')
      )
      expect(cssPath).toBeDefined()

      const cssContent = files[cssPath!]
      expect(cssContent).toContain('@import "tailwindcss"')
      expect(cssContent).toContain('@theme {')

      // „Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„ÅåÂá∫Âäõ„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(consoleSpy).toHaveBeenCalledWith(
        'üöÄ „Éá„Ç∂„Ç§„É≥„Éà„Éº„ÇØ„É≥Â§âÊèõ„ÇíÈñãÂßã„Åó„Åæ„Åô...'
      )
    })

    test('Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„Å´‰ΩúÊàê„Åï„Çå„Çã', async () => {
      // memfs„ÅØËá™ÂãïÁöÑ„Å´„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê„Åô„Çã
      await converter.convert()

      // „Éï„Ç°„Ç§„É´‰ªò„Åç„ÅÆÂá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™„Åå‰ΩúÊàê„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const files = vol.toJSON()
      const cssPath = Object.keys(files).find((path) =>
        path.includes('tailwind.css')
      )
      expect(cssPath).toBeDefined()
    })

    test('„Éá„Ç∂„Ç§„É≥„Éà„Éº„ÇØ„É≥„ÇíÂê´„ÇÄCSS„ÅåÁîüÊàê„Åï„Çå„Çã', async () => {
      await converter.convert()

      const files = vol.toJSON()
      const cssPath = Object.keys(files).find((path) =>
        path.includes('tailwind.css')
      )
      const cssContent = files[cssPath!]
      expect(cssContent).toContain('@import "tailwindcss"')
      expect(cssContent).toContain('@theme {')
      expect(cssContent).toContain(
        '--color-primitive-blue-500: oklch(53.992% 0.19058 257.48)'
      )
    })

    test('„É™„Çª„ÉÉ„ÉàÂ§âÊï∞„ÇíÂê´„ÇÄCSS„ÅåÁîüÊàê„Åï„Çå„Çã', async () => {
      await converter.convert()

      const files = vol.toJSON()
      const cssPath = Object.keys(files).find((path) =>
        path.includes('tailwind.css')
      )
      const cssContent = files[cssPath!]
      expect(cssContent).toContain('--color-*: initial;')
      expect(cssContent).toContain('--font-*: initial;')
      expect(cssContent).toContain('--spacing-*: initial;')
    })

    test('„Éï„Ç°„Ç§„É´Ë™≠„ÅøÂèñ„Çä„Ç®„É©„Éº„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
      // „ÉÜ„Çπ„Éà„Éà„Éº„ÇØ„É≥„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§„Åó„Å¶„Éï„Ç°„Ç§„É´‰∏çÂ≠òÂú®„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
      vol.reset()

      await expect(converter.convert()).rejects.toThrow(
        '„Éá„Ç∂„Ç§„É≥„Éà„Éº„ÇØ„É≥„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      )
    })

    test('‰∏çÊ≠£„Å™JSON„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
      // ‰∏çÊ≠£„Å™JSON„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíË®≠ÂÆö
      vol.reset()
      vol.fromJSON({
        './test-tokens.json': 'invalid json',
      })

      await expect(converter.convert()).rejects.toThrow()
    })
  })

  describe('constructor', () => {
    test('ÂºïÊï∞„Å™„Åó„Åß„Éá„Éï„Ç©„É´„Éà„Éë„Çπ„Åå‰ΩøÁî®„Åï„Çå„Çã', () => {
      const defaultConverter = new DesignTokenConverter()

      // „Éó„É©„Ç§„Éô„Éº„Éà„Éó„É≠„Éë„ÉÜ„Ç£„ÅØÁõ¥Êé•„ÉÜ„Çπ„Éà„Åß„Åç„Å™„ÅÑ„Åå„ÄÅÂãï‰Ωú„Çí„ÉÜ„Çπ„Éà„Åß„Åç„Çã
      expect(defaultConverter).toBeInstanceOf(DesignTokenConverter)
    })

    test('ÊåáÂÆö„Åï„Çå„Åü„Éë„Çπ„Åå‰ΩøÁî®„Åï„Çå„Çã', () => {
      const customConverter = new DesignTokenConverter(
        './custom.json',
        './custom-output'
      )

      expect(customConverter).toBeInstanceOf(DesignTokenConverter)
    })
  })

  describe('integration', () => {
    test('„Éà„Éº„ÇØ„É≥ÂèÇÁÖß„ÅåÊ≠£„Åó„ÅèËß£Ê±∫„Åï„Çå„Çã', async () => {
      await converter.convert()

      // ÁîüÊàê„Åï„Çå„ÅüCSS„Åß„Éà„Éº„ÇØ„É≥ÂèÇÁÖß„ÅåËß£Ê±∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const files = vol.toJSON()
      const cssPath = Object.keys(files).find((path) =>
        path.includes('tailwind.css')
      )
      const cssContent = files[cssPath!]

      // „Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØ„Éà„Éº„ÇØ„É≥„ÅåÂÆüÈöõ„ÅÆÂÄ§„Å´Ëß£Ê±∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(cssContent).toContain(
        '--background-color-content-default: oklch(53.992% 0.19058 257.48)'
      )
    })

    test('„Éç„Çπ„Éà„Åó„ÅüÂèÇÁÖß„ÅåÊ≠£„Åó„ÅèËß£Ê±∫„Åï„Çå„Çã', async () => {
      // „Éç„Çπ„Éà„Åó„ÅüÂèÇÁÖß„ÇíÊåÅ„Å§„Éà„Éº„ÇØ„É≥„Çª„ÉÉ„Éà„ÇíÁî®ÊÑè
      const nestedTokens: DesignTokens = {
        $schema:
          'https://design-tokens.github.io/community-group/format/tokens.json',
        color: {
          $type: 'color',
          primitive: { blue: { '500': { value: 'oklch(blue)' } } },
          alias: { primary: { value: '{color.primitive.blue.500}' } },
          semantic: {
            light: {
              primary: { bg: { value: '{color.alias.primary}' } },
            },
          },
        },
      }

      // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
      vol.reset()
      vol.fromJSON({
        './nested-test-tokens.json': JSON.stringify(nestedTokens),
      })

      const nestedConverter = new DesignTokenConverter(
        './nested-test-tokens.json',
        './nested-test-output'
      )

      await nestedConverter.convert()

      const files = vol.toJSON()
      const cssPath = Object.keys(files).find((path) =>
        path.includes('tailwind.css')
      )
      const cssContent = files[cssPath!]

      // „Éç„Çπ„Éà„Åó„ÅüÂèÇÁÖß„ÅåÊúÄÁµÇÁöÑ„Å´Ëß£Ê±∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(cssContent).toContain('--color-primitive-blue-500: oklch(blue)')
      expect(cssContent).toContain('--color-alias-primary: oklch(blue)')
      expect(cssContent).toContain('--background-color-primary: oklch(blue)')
    })

    test('„Åô„Åπ„Å¶„ÅÆ„Éá„Ç∂„Ç§„É≥„Éà„Éº„ÇØ„É≥„ÅåÂá¶ÁêÜ„Åï„Çå„Çã', async () => {
      await converter.convert()

      const files = vol.toJSON()
      const cssPath = Object.keys(files).find((path) =>
        path.includes('tailwind.css')
      )
      const cssContent = files[cssPath!]

      // „Åô„Åπ„Å¶„ÅÆ„Éà„Éº„ÇØ„É≥„ÅåÂ≠òÂú®„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(cssContent).toContain('--color-primitive-blue-500')
      expect(cssContent).toContain('--background-color-content-default')
      expect(cssContent).toContain('--spacing-4')
    })
  })
})
