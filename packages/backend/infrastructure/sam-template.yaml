AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Repository monitoring workflow with Step Functions'

Globals:
  Function:
    Timeout: 60
    Runtime: nodejs22.x
    Environment:
      Variables:
        USE_AWS: !Ref UseAws
        STAGE: !Ref Stage
        APP_STAGE: !Ref Stage
        DB_HOST: ""
        DB_PORT: ""
        DB_USER: ""
        DB_PASSWORD: ""
        DB_NAME: ""
        DB_SSL: "false"
        OPENAI_API_KEY: ""

Parameters:
  UseAws:
    Type: String
    Default: 'true'
    Description: Flag to indicate if running in AWS environment
  Stage:
    Type: String
    Default: 'dev'
    Description: Stage environment (dev, staging, prod)

Resources:
  # SQS Queues
  ProcessUpdatesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-process-updates-queue"
      VisibilityTimeout: 360
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ProcessUpdatesDeadLetterQueue.Arn
        maxReceiveCount: 3

  ProcessUpdatesDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-process-updates-dlq"
      MessageRetentionPeriod: 1209600  # 14 days

  # Lambda Functions
  ListDataSourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-list-datasources"
      CodeUri: ../dist/lambda/list-datasources/
      Handler: index.handler
      Description: 'List data sources for monitoring'
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-list-datasources*"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/supabase/db_url"

  DetectDataSourceUpdatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-detect-datasource-updates"
      CodeUri: ../dist/lambda/detect-datasource-updates/
      Handler: index.handler
      Description: 'Detect updates for a data source'
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-detect-datasource-updates*"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/supabase/db_url"

  ProcessUpdatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-process-updates"
      CodeUri: ../dist/lambda/process-updates/
      Handler: index.handler
      Runtime: nodejs22.x
      Timeout: 300
      MemorySize: 512
      ReservedConcurrentExecutions: 5
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessUpdatesQueue.Arn
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 0
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: 
              - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/supabase/db_url"
              - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/openai/api_key"
        - Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt ProcessUpdatesQueue.Arn

  # Step Functions State Machine
  RepositoryMonitoringStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${AWS::StackName}-repository-monitoring"
      DefinitionUri: repository-monitoring.asl.json
      DefinitionSubstitutions:
        ListDataSourcesFunctionArn: !GetAtt ListDataSourcesFunction.Arn
        DetectDataSourceUpdatesFunctionArn: !GetAtt DetectDataSourceUpdatesFunction.Arn
        ProcessUpdatesFunction: !GetAtt ProcessUpdatesFunction.Arn
        ProcessUpdatesQueueUrl: !Ref ProcessUpdatesQueue
        RepositoryMonitoringLogGroup.Arn: !GetAtt RepositoryMonitoringLogGroup.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt RepositoryMonitoringLogGroup.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt ListDataSourcesFunction.Arn
                - !GetAtt DetectDataSourceUpdatesFunction.Arn
                - !GetAtt ProcessUpdatesFunction.Arn
        - Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt ProcessUpdatesQueue.Arn
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunctions/${AWS::StackName}-repository-monitoring*"

  # CloudWatch Log Group for Step Functions
  RepositoryMonitoringLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/stepfunctions/${AWS::StackName}-repository-monitoring"
      RetentionInDays: 30

  # EventBridge Rule for daily execution
  RepositoryMonitoringScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-repository-monitoring-schedule"
      Description: "Daily execution of repository monitoring workflow"
      ScheduleExpression: "cron(0 8 * * ? *)"  # Daily at 17:00 JST (08:00 UTC)
      State: ENABLED
      Targets:
        - Arn: !Ref RepositoryMonitoringStateMachine
          Id: "RepositoryMonitoringTarget"
          RoleArn: !GetAtt EventBridgeExecutionRole.Arn

  # IAM Role for EventBridge to execute Step Functions
  EventBridgeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref RepositoryMonitoringStateMachine

  # SNS Topic for alerts
  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-alerts"
      DisplayName: "Repository Monitoring Alerts"

  # CloudWatch Alarms
  StepFunctionsExecutionFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-stepfunctions-execution-failed"
      AlarmDescription: "Alert when Step Functions execution fails"
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref RepositoryMonitoringStateMachine
      AlarmActions:
        - !Ref AlertsTopic
      TreatMissingData: notBreaching

  LambdaErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-lambda-error-rate"
      AlarmDescription: "Alert when Lambda error rate for this stack exceeds 5%"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      Threshold: 5
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertsTopic
      Metrics:
        - Id: e1
          Expression: "100 * (mErrors / mInvocations)"
          Label: "Error Rate"
          ReturnData: true
        - Id: mErrors
          Expression: !Sub 'SEARCH(''{AWS/Lambda,FunctionName} MetricName="Errors" FunctionName="${AWS::StackName}"'', ''Sum'', 300)'
          ReturnData: false
        - Id: mInvocations
          Expression: !Sub 'SEARCH(''{AWS/Lambda,FunctionName} MetricName="Invocations" FunctionName="${AWS::StackName}"'', ''Sum'', 300)'
          ReturnData: false

  ProcessUpdatesDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-dlq-messages"
      AlarmDescription: "Alert when messages appear in DLQ"
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ProcessUpdatesDeadLetterQueue.QueueName
      AlarmActions:
        - !Ref AlertsTopic
      TreatMissingData: notBreaching

Outputs:
  StateMachineArn:
    Description: 'ARN of the repository monitoring state machine'
    Value: !Ref RepositoryMonitoringStateMachine
    Export:
      Name: !Sub "${AWS::StackName}-StateMachineArn"
  
  ListDataSourcesFunctionArn:
    Description: 'ARN of the list data sources function'
    Value: !GetAtt ListDataSourcesFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ListDataSourcesFunctionArn"

  DetectDataSourceUpdatesFunctionArn:
    Description: 'ARN of the detect data source updates function'
    Value: !GetAtt DetectDataSourceUpdatesFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DetectDataSourceUpdatesFunctionArn"

  ProcessUpdatesFunctionArn:
    Description: 'ARN of the process updates function'
    Value: !GetAtt ProcessUpdatesFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ProcessUpdatesFunctionArn"

  ProcessUpdatesQueueUrl:
    Description: 'URL of the process updates SQS queue'
    Value: !Ref ProcessUpdatesQueue
    Export:
      Name: !Sub "${AWS::StackName}-ProcessUpdatesQueueUrl"

  ProcessUpdatesQueueArn:
    Description: 'ARN of the process updates SQS queue'
    Value: !GetAtt ProcessUpdatesQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ProcessUpdatesQueueArn"

  ScheduleRuleArn:
    Description: 'ARN of the EventBridge schedule rule'
    Value: !GetAtt RepositoryMonitoringScheduleRule.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ScheduleRuleArn"

  AlertsTopicArn:
    Description: 'ARN of the SNS alerts topic'
    Value: !Ref AlertsTopic
    Export:
      Name: !Sub "${AWS::StackName}-AlertsTopicArn"