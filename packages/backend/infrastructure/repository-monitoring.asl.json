{
  "Comment": "Repository monitoring workflow - detects updates for all data sources",
  "StartAt": "ListDataSources",
  "States": {
    "ListDataSources": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ListDataSourcesFunction.Arn}",
        "Payload": {
          "sourceType": "github_repository"
        }
      },
      "ResultPath": "$.listDataSourcesResult",
      "OutputPath": "$.listDataSourcesResult.Payload",
      "Next": "ProcessDataSources",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "ProcessDataSources": {
      "Type": "Map",
      "ItemsPath": "$.dataSources",
      "MaxConcurrency": 5,
      "Parameters": {
        "dataSourceId.$": "$$.Map.Item.Value.id"
      },
      "Iterator": {
        "StartAt": "DetectDataSourceUpdates",
        "States": {
          "DetectDataSourceUpdates": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${DetectDataSourceUpdatesFunctionArn}",
              "Payload": {
                "dataSourceId.$": "$.dataSourceId"
              }
            },
            "ResultPath": "$.detectUpdatesResult",
            "OutputPath": "$.detectUpdatesResult.Payload",
            "Next": "CheckForNewEvents",
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "HandleDataSourceError",
                "ResultPath": "$.error"
              }
            ]
          },
          "HandleDataSourceError": {
            "Type": "Pass",
            "Result": {
              "status": "failed",
              "message": "Failed to process data source"
            },
            "ResultPath": "$.errorHandled",
            "End": true
          },
          "CheckForNewEvents": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.newEventIds",
                "IsPresent": true,
                "Next": "HasNewEvents"
              }
            ],
            "Default": "NoNewEvents"
          },
          "HasNewEvents": {
            "Type": "Choice",
            "Choices": [
              {
                "NumericGreaterThan": 0,
                "Variable": "States.ArrayLength($.newEventIds)",
                "Next": "ProcessUpdates"
              }
            ],
            "Default": "NoNewEvents"
          },
          "ProcessUpdates": {
            "Type": "Map",
            "ItemsPath": "$.newEventIds",
            "MaxConcurrency": 10,
            "Parameters": {
              "eventId.$": "$"
            },
            "Iterator": {
              "StartAt": "SendToQueue",
              "States": {
                "SendToQueue": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sqs:sendMessage",
                  "Parameters": {
                    "QueueUrl": "${ProcessUpdatesQueueUrl}",
                    "MessageBody": {
                      "eventId.$": "$.eventId"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": ["States.TaskFailed"],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 3,
                      "BackoffRate": 2.0
                    }
                  ],
                  "End": true
                }
              }
            },
            "ResultPath": "$.processUpdatesResult",
            "End": true
          },
          "NoNewEvents": {
            "Type": "Pass",
            "Result": {
              "status": "completed",
              "message": "No new events to process"
            },
            "End": true
          }
        }
      },
      "ResultPath": "$.mapResults",
      "Next": "SummarizeResults"
    },
    "SummarizeResults": {
      "Type": "Pass",
      "Parameters": {
        "status": "completed",
        "timestamp.$": "$$.State.EnteredTime",
        "processedDataSourcesCount.$": "States.ArrayLength($.mapResults)",
        "results.$": "$.mapResults"
      },
      "End": true
    },
    "HandleError": {
      "Type": "Pass",
      "Result": {
        "status": "failed",
        "message": "Failed to list data sources"
      },
      "End": true
    }
  }
}
