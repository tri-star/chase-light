name: Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "pnpm-lock.yaml"
      - "packages/frontend/**"
      - "packages/backend/**"
      - "!packages/frontend/docs/**"
      - "!packages/backend/docs/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "pnpm-lock.yaml"
      - "packages/frontend/**"
      - "packages/backend/**"
      - "!packages/frontend/docs/**"
      - "!packages/backend/docs/**"

jobs:
  # 変更されたファイルを検出
  detect-changes:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # 5.0.0
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: changes
        with:
          filters: |
            frontend:
              - 'packages/frontend/**'
              - 'pnpm-lock.yaml'
            backend:
              - 'packages/backend/**'
              - 'pnpm-lock.yaml'

  # Frontend テスト（フロントエンド変更時のみ）
  test-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Frontend Test
        run: pnpm --filter frontend test

      - name: Frontend Build
        run: pnpm --filter frontend build

  # Backend テスト（バックエンド変更時のみ）
  test-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    services:
      postgres:
        image: public.ecr.aws/docker/library/postgres:15-bookworm
        env:
          POSTGRES_DB: chase_light_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "password"
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d chase_light_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Backend test
        run: pnpm --filter backend test:coverage

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
        with:
          files: packages/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Backend Build
        run: pnpm --filter backend build

  # E2E テスト（どちらかのテストが成功した場合）
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [detect-changes, test-frontend, test-backend]
    if: |
      always() && 
      (
        (needs.detect-changes.outputs.frontend-changed == 'true' && needs.test-frontend.result == 'success') ||
        (needs.detect-changes.outputs.backend-changed == 'true' && needs.test-backend.result == 'success') ||
        (needs.detect-changes.outputs.frontend-changed != 'true' && needs.detect-changes.outputs.backend-changed != 'true')
      )

    services:
      postgres:
        image: public.ecr.aws/docker/library/postgres:15-bookworm
        env:
          POSTGRES_DB: chase_light_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "password"
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d chase_light_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('packages/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Initialize database
        run: |
          pnpm --filter backend test:migrate

      - name: Install Playwright browsers
        run: pnpm --filter frontend test:e2e:install
        # if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Build frontend
        run: |
          rm -rf packages/frontend/.output
          pnpm --filter frontend build

      - name: Start frontend
        run: pnpm --filter frontend preview > nuxt_preview.log 2>&1 &
        env:
          AUTH0_SECRET: dummy
          AUTH0_BASE_URL: http://localhost:3000
          AUTH0_ISSUER_BASE_URL: ""
          AUTH0_CLIENT_ID: "clientid"
          AUTH0_CLIENT_SECRET: "dummy"
          NUXT_SESSION_SECRET: "dummy"
          DATABASE_URL: postgresql://postgres:password@localhost:5432/chase_light_test?sslmode=disable
          NUXT_PUBLIC_BASE_URL: http://localhost:3000
          APP_STAGE: dev

      - name: Wait for frontend to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'

      - name: Run E2E tests
        run: pnpm --filter frontend test:e2e
        env:
          AUTH0_SECRET: dummy
          AUTH0_BASE_URL: http://localhost:3000
          AUTH0_ISSUER_BASE_URL: ""
          AUTH0_CLIENT_ID: "dummy"
          AUTH0_CLIENT_SECRET: "dummy"
          NUXT_SESSION_SECRET: "dummy"
          DATABASE_URL: postgresql://postgres:password@localhost:5432/chase_light_test?sslmode=disable
          NUXT_PUBLIC_BASE_URL: http://localhost:3000
          APP_STAGE: dev

      - name: Upload Playwright report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: always()
        with:
          name: playwright-report
          path: packages/frontend/playwright-report/
          retention-days: 30

      - name: Upload Nuxt preview log
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: always()
        with:
          name: nuxt-preview-log
          path: nuxt_preview.log
          retention-days: 30
