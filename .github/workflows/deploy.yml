name: Deploy(Backend)

on:
  # push:
  #   branches: [main]
  #   paths:
  #     - "packages/backend/**"
  #     - "!packages/backend/docs/**"
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ inputs.env }}

    # AWS認証に必要な権限設定
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # 5.0.0

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: "24"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint and type check
        run: |
          pnpm --filter backend lint
          pnpm --filter backend lint:type

      - name: Build Lambda functions
        run: pnpm --filter backend build:lambda

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@c71dd89d980e49367c70391e8ada4353f52f2800 # v2
        with:
          use-installer: true

      - name: Validate SAM template
        run: |
          cd packages/backend/infrastructure
          sam validate --lint --template sam-template.yaml

      - name: Deploy with SAM
        run: |
          cd packages/backend/infrastructure
          sam deploy \
            --template-file sam-template.yaml \
            --stack-name chase-light-${{ inputs.env }} \
            --s3-bucket "${{ secrets.SAM_S3_BUCKET }}" \
            --s3-prefix "chase-light-${{ inputs.env }}" \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              UseAws=true \
              Stage=${{ inputs.env }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Display deployment outputs
        run: |
          cd packages/backend/infrastructure
          sam list stack-outputs --stack-name chase-light-${{ inputs.env }} --output table

      - name: Test deployed Step Functions (optional)
        if: vars.TEST_STEPFUNCTIONS == 'true'
        run: |
          # Get Step Functions ARN from stack outputs
          STEP_FUNCTION_ARN=$(aws cloudformation describe-stacks \
            --stack-name chase-light-${{ inputs.env }} \
            --query 'Stacks[0].Outputs[?OutputKey==`StateMachineArn`].OutputValue' \
            --output text)

          echo "Testing Step Functions: $STEP_FUNCTION_ARN"

          # Start execution
          EXECUTION_ARN=$(aws stepfunctions start-execution \
            --state-machine-arn "$STEP_FUNCTION_ARN" \
            --name "test-execution-$(date +%s)" \
            --query 'executionArn' \
            --output text)

          echo "Started execution: $EXECUTION_ARN"

          # Wait for completion (timeout after 5 minutes)
          timeout 300 bash -c "
            while true; do
              STATUS=\$(aws stepfunctions describe-execution \
                --execution-arn '$EXECUTION_ARN' \
                --query 'status' \
                --output text)
              echo \"Execution status: \$STATUS\"
              if [[ \$STATUS == 'SUCCEEDED' ]]; then
                echo 'Execution completed successfully'
                break
              elif [[ \$STATUS == 'FAILED' ]] || [[ \$STATUS == 'TIMED_OUT' ]] || [[ \$STATUS == 'ABORTED' ]]; then
                echo 'Execution failed'
                exit 1
              fi
              sleep 10
            done
          "

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment completed successfully"
          echo "Stack: chase-light-${{ inputs.env }}"
          echo "Environment: ${{ inputs.env }}"
          echo "Region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed"
          echo "Please check the logs above for details"
