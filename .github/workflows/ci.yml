name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Type check
        run: pnpm run lint:type

      - name: Test
        run: pnpm run test

      - name: Build
        run: pnpm run build

  e2e:
    runs-on: ubuntu-latest
    # needs: test

    services:
      postgres:
        image: public.ecr.aws/docker/library/postgres:15-bookworm
        env:
          POSTGRES_DB: chase_light
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_HOST_AUTH_METHOD: md5
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Initialize database
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          PGPASSWORD=password psql -h localhost -U postgres -d chase_light -f database/init/01-create-sessions-table.sql

      - name: Install Playwright browsers
        run: pnpm --filter frontend test:e2e:install
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Build frontend
        run: pnpm --filter frontend build

      - name: Start frontend
        run: pnpm --filter frontend preview > nuxt_preview.log 2>&1 &
        env:
          AUTH0_SECRET: test-secret
          AUTH0_BASE_URL: http://localhost:3000
          AUTH0_ISSUER_BASE_URL: ""
          AUTH0_CLIENT_ID: "abcdefgh"
          AUTH0_CLIENT_SECRET: "testtestabcd"
          NUXT_SESSION_SECRET: "re12IqWHwRISPJ3rLEZxLB+0UvD2hV+ANJjPWF0V+eQ="
          DATABASE_URL: postgresql://postgres:password@localhost:5432/chase_light?sslmode=disable
          NUXT_PUBLIC_BASE_URL: http://localhost:3000
          APP_STAGE: development

      - name: Wait for frontend to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'
          sleep 10

      - name: Run E2E tests
        run: pnpm --filter frontend test:e2e
        env:
          AUTH0_SECRET: test-secret
          AUTH0_BASE_URL: http://localhost:3000
          AUTH0_ISSUER_BASE_URL: ""
          AUTH0_CLIENT_ID: "abcdefgh"
          AUTH0_CLIENT_SECRET: "testtestabcd"
          NUXT_SESSION_SECRET: "re12IqWHwRISPJ3rLEZxLB+0UvD2hV+ANJjPWF0V+eQ="
          DATABASE_URL: postgresql://postgres:password@localhost:5432/chase_light?sslmode=disable
          NUXT_PUBLIC_BASE_URL: http://localhost:3000
          APP_STAGE: development

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: packages/frontend/playwright-report/
          retention-days: 30

      - name: Upload Nuxt preview log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nuxt-preview-log
          path: nuxt_preview.log
          retention-days: 30
